import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Ordertype } from "data/data";
import { RootState } from "../../store";
import { fetchOrders } from './ordersAPI';

export interface OrderState {
  content: Ordertype[];
  data: Ordertype[];
  isLoading: boolean;
}

const initialState: OrderState = {
  content: [],
  data: [],
  isLoading: false,
};

export const getOrdersAsync = createAsyncThunk(
  'orders/fetchOrders',
  async () => {
    const response = await fetchOrders();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "orders",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    filterOrders: (state, action: PayloadAction<string>) => {
      const filter = action.payload.toLowerCase();
      state.data = state.content.filter((order: Ordertype) =>
          order.customerName!.toLowerCase().includes(filter) ||
          order.orderID!.toString().includes(filter));
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getOrdersAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getOrdersAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.content = action.payload;
        state.data = action.payload;
      })
      .addCase(getOrdersAsync.rejected, (state) => {
        state.isLoading = false;
      });
  },
});

export const { filterOrders } = counterSlice.actions;

export const selectOrders = (state: RootState) => state.orders.data;
export const isLoading = (state: RootState) => state.orders.isLoading;

export default counterSlice.reducer;
